// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/tailor-inc/platform-core-services/api/gen/go/connector/v1

package connectorv1

import v1 "github.com/tailor-inc/platform-core-services/api/gen/go/tailordb/v1:tailordbv1"

#Namespace: {
	id?:          string @go(Id) @protobuf(1,bytes,opt,proto3)
	name?:        string @go(Name) @protobuf(2,bytes,opt,proto3)
	description?: string @go(Description) @protobuf(3,bytes,opt,proto3)
}

#Manifest: {
	id?:      string          @go(Id) @protobuf(1,bytes,opt,proto3)
	invoker?: null | #Invoker @go(Invoker,*Invoker) @protobuf(2,bytes,opt,proto3)

	// Types that are assignable to Driver:
	//
	//	*Manifest_AwsS3Driver
	//	*Manifest_GcsDriver
	//	*Manifest_GraphqlDriver
	Driver: _#isManifest_Driver

	// Types that are assignable to Parser:
	//
	//	*Manifest_CsvParser
	//	*Manifest_JsonParser
	Parser: _#isManifest_Parser

	// Types that are assignable to Loader:
	//
	//	*Manifest_GraphqlLoader
	Loader: _#isManifest_Loader
	fields?: [...null | #Field] @go(Schema,[]*Field) @protobuf(40,bytes,rep,name=schema,proto3)
}

_#isManifest_Driver: _

#Manifest_AwsS3Driver: {
	awsS3?: null | #AwsS3Driver @go(AwsS3Driver,*AwsS3Driver) @protobuf(10,bytes,opt,name=aws_s3_driver,json=awsS3Driver,proto3,oneof)
}

#Manifest_GcsDriver: {
	gcs?: null | #GCSDriver @go(GcsDriver,*GCSDriver) @protobuf(11,bytes,opt,name=gcs_driver,json=gcsDriver,proto3,oneof)
}

#Manifest_GraphqlDriver: {
	graphql?: null | #GraphqlDriver @go(GraphqlDriver,*GraphqlDriver) @protobuf(12,bytes,opt,name=graphql_driver,json=graphqlDriver,proto3,oneof)
}

_#isManifest_Parser: _

#Manifest_CsvParser: {
	csv?: null | #CsvParser @go(CsvParser,*CsvParser) @protobuf(21,bytes,opt,name=csv_parser,json=csvParser,proto3,oneof)
}

#Manifest_JsonParser: {
	json?: null | #JsonParser @go(JsonParser,*JsonParser) @protobuf(22,bytes,opt,name=json_parser,json=jsonParser,proto3,oneof)
}

_#isManifest_Loader: _

#Manifest_GraphqlLoader: {
	loader?: null | #GraphqlLoader @go(GraphqlLoader,*GraphqlLoader) @protobuf(30,bytes,opt,name=graphql_loader,json=graphqlLoader,proto3,oneof)
}

#Invoker: {
	userId?:         string @go(UserId) @protobuf(1,bytes,opt,name=user_id,json=userId,proto3)
	organizationId?: string @go(OrganizationId) @protobuf(2,bytes,opt,name=organization_id,json=organizationId,proto3)
	roleId?: [...string] @go(Roles,[]string) @protobuf(3,bytes,rep,name=roles,proto3)
	groupId?: [...string] @go(Groups,[]string) @protobuf(4,bytes,rep,name=groups,proto3)
	attributeId?: [...string] @go(Attributes,[]string) @protobuf(5,bytes,rep,name=attributes,proto3)
}

#AWSCredentials: {
	aws_access_key_id?:     string @go(AwsAccessKeyId) @protobuf(1,bytes,opt,json=awsAccessKeyId,proto3)
	aws_secret_access_key?: string @go(AwsSecretAccessKey) @protobuf(2,bytes,opt,json=awsSecretAccessKey,proto3)
	region?:                string @go(Region) @protobuf(3,bytes,opt,proto3)
	role_arn?:              string @go(RoleArn) @protobuf(4,bytes,opt,json=roleArn,proto3)
}

#AwsS3Driver: {
	bucket?:      string                 @go(Bucket) @protobuf(1,bytes,opt,proto3)
	prefix?:      string                 @go(Prefix) @protobuf(2,bytes,opt,proto3)
	keyPattern?:  string                 @go(KeyPattern) @protobuf(3,bytes,opt,name=key_pattern,json=keyPattern,proto3)
	compression?: string                 @go(Compression) @protobuf(4,bytes,opt,proto3)
	credentials?: null | #AWSCredentials @go(Credentials,*AWSCredentials) @protobuf(5,bytes,opt,proto3)
}

#GCSDriver: {
	bucket?:      string @go(Bucket) @protobuf(1,bytes,opt,proto3)
	prefix?:      string @go(Prefix) @protobuf(2,bytes,opt,proto3)
	keyPattern?:  string @go(KeyPattern) @protobuf(3,bytes,opt,name=key_pattern,json=keyPattern,proto3)
	compression?: string @go(Compression) @protobuf(4,bytes,opt,proto3)
}

#GraphqlDriver: {
	url?:   string @go(Url) @protobuf(1,bytes,opt,proto3)
	query?: string @go(Query) @protobuf(2,bytes,opt,proto3)
}

#CsvParser: {
	parser?:      string @go(Parser) @protobuf(1,bytes,opt,proto3)
	skipOnError?: bool   @go(SkipOnError) @protobuf(2,varint,opt,name=skip_on_error,json=skipOnError,proto3)
}

#JsonParser: {
	parser?:      string @go(Parser) @protobuf(1,bytes,opt,proto3)
	skipOnError?: bool   @go(SkipOnError) @protobuf(2,varint,opt,name=skip_on_error,json=skipOnError,proto3)
}

#GraphqlLoader: {
	graphqlEndpoint?: string @go(GraphqlEndpoint) @protobuf(1,bytes,opt,name=graphql_endpoint,json=graphqlEndpoint,proto3)
	graphqlQuery?:    string @go(GraphqlQuery) @protobuf(2,bytes,opt,name=graphql_query,json=graphqlQuery,proto3)
	mapping?:         string @go(Mapping) @protobuf(3,bytes,opt,proto3)
	check?:           string @go(Check) @protobuf(4,bytes,opt,proto3)
	skipOnError?:     bool   @go(SkipOnError) @protobuf(5,varint,opt,name=skip_on_error,json=skipOnError,proto3)
}

#Field: {
	name?:   string                 @go(Name) @protobuf(1,bytes,opt,proto3)
	config?: null | v1.#FieldConfig @go(Config,*v1.FieldConfig) @protobuf(10,bytes,opt,proto3)
}
